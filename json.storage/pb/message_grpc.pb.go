// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.24.4
// source: message.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	JsonStorageService_About_FullMethodName              = "/pb.JsonStorageService/About"
	JsonStorageService_Ping_FullMethodName               = "/pb.JsonStorageService/Ping"
	JsonStorageService_GetDocument_FullMethodName        = "/pb.JsonStorageService/GetDocument"
	JsonStorageService_GetDocuments_FullMethodName       = "/pb.JsonStorageService/GetDocuments"
	JsonStorageService_GetStreamDocuments_FullMethodName = "/pb.JsonStorageService/GetStreamDocuments"
	JsonStorageService_CountDocuments_FullMethodName     = "/pb.JsonStorageService/CountDocuments"
	JsonStorageService_PushDocuments_FullMethodName      = "/pb.JsonStorageService/PushDocuments"
	JsonStorageService_PatchDocuments_FullMethodName     = "/pb.JsonStorageService/PatchDocuments"
	JsonStorageService_DeleteDocuments_FullMethodName    = "/pb.JsonStorageService/DeleteDocuments"
)

// JsonStorageServiceClient is the client API for JsonStorageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JsonStorageServiceClient interface {
	About(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AboutResponse, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	GetDocument(ctx context.Context, in *GetDocRequest, opts ...grpc.CallOption) (*GetDocResponse, error)
	GetDocuments(ctx context.Context, in *GetDocsRequest, opts ...grpc.CallOption) (*GetDocsResponse, error)
	GetStreamDocuments(ctx context.Context, in *GetDocsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetDocsStreamResponse], error)
	CountDocuments(ctx context.Context, in *CountDocsRequest, opts ...grpc.CallOption) (*CountDocsResponse, error)
	PushDocuments(ctx context.Context, in *PushDocsRequest, opts ...grpc.CallOption) (*PushDocsResponse, error)
	PatchDocuments(ctx context.Context, in *PatchDocsRequest, opts ...grpc.CallOption) (*PatchDocsResponse, error)
	DeleteDocuments(ctx context.Context, in *DeleteDocsRequest, opts ...grpc.CallOption) (*DeleteDocsResponse, error)
}

type jsonStorageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJsonStorageServiceClient(cc grpc.ClientConnInterface) JsonStorageServiceClient {
	return &jsonStorageServiceClient{cc}
}

func (c *jsonStorageServiceClient) About(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AboutResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AboutResponse)
	err := c.cc.Invoke(ctx, JsonStorageService_About_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jsonStorageServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, JsonStorageService_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jsonStorageServiceClient) GetDocument(ctx context.Context, in *GetDocRequest, opts ...grpc.CallOption) (*GetDocResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDocResponse)
	err := c.cc.Invoke(ctx, JsonStorageService_GetDocument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jsonStorageServiceClient) GetDocuments(ctx context.Context, in *GetDocsRequest, opts ...grpc.CallOption) (*GetDocsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDocsResponse)
	err := c.cc.Invoke(ctx, JsonStorageService_GetDocuments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jsonStorageServiceClient) GetStreamDocuments(ctx context.Context, in *GetDocsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetDocsStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &JsonStorageService_ServiceDesc.Streams[0], JsonStorageService_GetStreamDocuments_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetDocsRequest, GetDocsStreamResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type JsonStorageService_GetStreamDocumentsClient = grpc.ServerStreamingClient[GetDocsStreamResponse]

func (c *jsonStorageServiceClient) CountDocuments(ctx context.Context, in *CountDocsRequest, opts ...grpc.CallOption) (*CountDocsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountDocsResponse)
	err := c.cc.Invoke(ctx, JsonStorageService_CountDocuments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jsonStorageServiceClient) PushDocuments(ctx context.Context, in *PushDocsRequest, opts ...grpc.CallOption) (*PushDocsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PushDocsResponse)
	err := c.cc.Invoke(ctx, JsonStorageService_PushDocuments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jsonStorageServiceClient) PatchDocuments(ctx context.Context, in *PatchDocsRequest, opts ...grpc.CallOption) (*PatchDocsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PatchDocsResponse)
	err := c.cc.Invoke(ctx, JsonStorageService_PatchDocuments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jsonStorageServiceClient) DeleteDocuments(ctx context.Context, in *DeleteDocsRequest, opts ...grpc.CallOption) (*DeleteDocsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteDocsResponse)
	err := c.cc.Invoke(ctx, JsonStorageService_DeleteDocuments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JsonStorageServiceServer is the server API for JsonStorageService service.
// All implementations must embed UnimplementedJsonStorageServiceServer
// for forward compatibility.
type JsonStorageServiceServer interface {
	About(context.Context, *emptypb.Empty) (*AboutResponse, error)
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	GetDocument(context.Context, *GetDocRequest) (*GetDocResponse, error)
	GetDocuments(context.Context, *GetDocsRequest) (*GetDocsResponse, error)
	GetStreamDocuments(*GetDocsRequest, grpc.ServerStreamingServer[GetDocsStreamResponse]) error
	CountDocuments(context.Context, *CountDocsRequest) (*CountDocsResponse, error)
	PushDocuments(context.Context, *PushDocsRequest) (*PushDocsResponse, error)
	PatchDocuments(context.Context, *PatchDocsRequest) (*PatchDocsResponse, error)
	DeleteDocuments(context.Context, *DeleteDocsRequest) (*DeleteDocsResponse, error)
	mustEmbedUnimplementedJsonStorageServiceServer()
}

// UnimplementedJsonStorageServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedJsonStorageServiceServer struct{}

func (UnimplementedJsonStorageServiceServer) About(context.Context, *emptypb.Empty) (*AboutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method About not implemented")
}
func (UnimplementedJsonStorageServiceServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedJsonStorageServiceServer) GetDocument(context.Context, *GetDocRequest) (*GetDocResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocument not implemented")
}
func (UnimplementedJsonStorageServiceServer) GetDocuments(context.Context, *GetDocsRequest) (*GetDocsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocuments not implemented")
}
func (UnimplementedJsonStorageServiceServer) GetStreamDocuments(*GetDocsRequest, grpc.ServerStreamingServer[GetDocsStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetStreamDocuments not implemented")
}
func (UnimplementedJsonStorageServiceServer) CountDocuments(context.Context, *CountDocsRequest) (*CountDocsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountDocuments not implemented")
}
func (UnimplementedJsonStorageServiceServer) PushDocuments(context.Context, *PushDocsRequest) (*PushDocsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushDocuments not implemented")
}
func (UnimplementedJsonStorageServiceServer) PatchDocuments(context.Context, *PatchDocsRequest) (*PatchDocsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchDocuments not implemented")
}
func (UnimplementedJsonStorageServiceServer) DeleteDocuments(context.Context, *DeleteDocsRequest) (*DeleteDocsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDocuments not implemented")
}
func (UnimplementedJsonStorageServiceServer) mustEmbedUnimplementedJsonStorageServiceServer() {}
func (UnimplementedJsonStorageServiceServer) testEmbeddedByValue()                            {}

// UnsafeJsonStorageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JsonStorageServiceServer will
// result in compilation errors.
type UnsafeJsonStorageServiceServer interface {
	mustEmbedUnimplementedJsonStorageServiceServer()
}

func RegisterJsonStorageServiceServer(s grpc.ServiceRegistrar, srv JsonStorageServiceServer) {
	// If the following call pancis, it indicates UnimplementedJsonStorageServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&JsonStorageService_ServiceDesc, srv)
}

func _JsonStorageService_About_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JsonStorageServiceServer).About(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JsonStorageService_About_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JsonStorageServiceServer).About(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _JsonStorageService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JsonStorageServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JsonStorageService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JsonStorageServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JsonStorageService_GetDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDocRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JsonStorageServiceServer).GetDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JsonStorageService_GetDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JsonStorageServiceServer).GetDocument(ctx, req.(*GetDocRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JsonStorageService_GetDocuments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDocsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JsonStorageServiceServer).GetDocuments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JsonStorageService_GetDocuments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JsonStorageServiceServer).GetDocuments(ctx, req.(*GetDocsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JsonStorageService_GetStreamDocuments_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetDocsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JsonStorageServiceServer).GetStreamDocuments(m, &grpc.GenericServerStream[GetDocsRequest, GetDocsStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type JsonStorageService_GetStreamDocumentsServer = grpc.ServerStreamingServer[GetDocsStreamResponse]

func _JsonStorageService_CountDocuments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountDocsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JsonStorageServiceServer).CountDocuments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JsonStorageService_CountDocuments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JsonStorageServiceServer).CountDocuments(ctx, req.(*CountDocsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JsonStorageService_PushDocuments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushDocsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JsonStorageServiceServer).PushDocuments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JsonStorageService_PushDocuments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JsonStorageServiceServer).PushDocuments(ctx, req.(*PushDocsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JsonStorageService_PatchDocuments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchDocsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JsonStorageServiceServer).PatchDocuments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JsonStorageService_PatchDocuments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JsonStorageServiceServer).PatchDocuments(ctx, req.(*PatchDocsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JsonStorageService_DeleteDocuments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDocsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JsonStorageServiceServer).DeleteDocuments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JsonStorageService_DeleteDocuments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JsonStorageServiceServer).DeleteDocuments(ctx, req.(*DeleteDocsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// JsonStorageService_ServiceDesc is the grpc.ServiceDesc for JsonStorageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JsonStorageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.JsonStorageService",
	HandlerType: (*JsonStorageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "About",
			Handler:    _JsonStorageService_About_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _JsonStorageService_Ping_Handler,
		},
		{
			MethodName: "GetDocument",
			Handler:    _JsonStorageService_GetDocument_Handler,
		},
		{
			MethodName: "GetDocuments",
			Handler:    _JsonStorageService_GetDocuments_Handler,
		},
		{
			MethodName: "CountDocuments",
			Handler:    _JsonStorageService_CountDocuments_Handler,
		},
		{
			MethodName: "PushDocuments",
			Handler:    _JsonStorageService_PushDocuments_Handler,
		},
		{
			MethodName: "PatchDocuments",
			Handler:    _JsonStorageService_PatchDocuments_Handler,
		},
		{
			MethodName: "DeleteDocuments",
			Handler:    _JsonStorageService_DeleteDocuments_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetStreamDocuments",
			Handler:       _JsonStorageService_GetStreamDocuments_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "message.proto",
}

const (
	KeyValueService_Get_FullMethodName    = "/pb.KeyValueService/Get"
	KeyValueService_Set_FullMethodName    = "/pb.KeyValueService/Set"
	KeyValueService_Delete_FullMethodName = "/pb.KeyValueService/Delete"
)

// KeyValueServiceClient is the client API for KeyValueService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KeyValueServiceClient interface {
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*SetResponse, error)
	Delete(ctx context.Context, in *DelRequest, opts ...grpc.CallOption) (*DelResponse, error)
}

type keyValueServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKeyValueServiceClient(cc grpc.ClientConnInterface) KeyValueServiceClient {
	return &keyValueServiceClient{cc}
}

func (c *keyValueServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, KeyValueService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyValueServiceClient) Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*SetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetResponse)
	err := c.cc.Invoke(ctx, KeyValueService_Set_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyValueServiceClient) Delete(ctx context.Context, in *DelRequest, opts ...grpc.CallOption) (*DelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelResponse)
	err := c.cc.Invoke(ctx, KeyValueService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeyValueServiceServer is the server API for KeyValueService service.
// All implementations must embed UnimplementedKeyValueServiceServer
// for forward compatibility.
type KeyValueServiceServer interface {
	Get(context.Context, *GetRequest) (*GetResponse, error)
	Set(context.Context, *SetRequest) (*SetResponse, error)
	Delete(context.Context, *DelRequest) (*DelResponse, error)
	mustEmbedUnimplementedKeyValueServiceServer()
}

// UnimplementedKeyValueServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedKeyValueServiceServer struct{}

func (UnimplementedKeyValueServiceServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedKeyValueServiceServer) Set(context.Context, *SetRequest) (*SetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedKeyValueServiceServer) Delete(context.Context, *DelRequest) (*DelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedKeyValueServiceServer) mustEmbedUnimplementedKeyValueServiceServer() {}
func (UnimplementedKeyValueServiceServer) testEmbeddedByValue()                         {}

// UnsafeKeyValueServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeyValueServiceServer will
// result in compilation errors.
type UnsafeKeyValueServiceServer interface {
	mustEmbedUnimplementedKeyValueServiceServer()
}

func RegisterKeyValueServiceServer(s grpc.ServiceRegistrar, srv KeyValueServiceServer) {
	// If the following call pancis, it indicates UnimplementedKeyValueServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&KeyValueService_ServiceDesc, srv)
}

func _KeyValueService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyValueServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyValueService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyValueServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyValueService_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyValueServiceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyValueService_Set_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyValueServiceServer).Set(ctx, req.(*SetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyValueService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyValueServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyValueService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyValueServiceServer).Delete(ctx, req.(*DelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KeyValueService_ServiceDesc is the grpc.ServiceDesc for KeyValueService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KeyValueService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.KeyValueService",
	HandlerType: (*KeyValueServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _KeyValueService_Get_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _KeyValueService_Set_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _KeyValueService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message.proto",
}
