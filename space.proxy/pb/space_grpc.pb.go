// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.24.4
// source: message.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StorageCloudService_Head_FullMethodName            = "/pb.StorageCloudService/Head"
	StorageCloudService_Fetch_FullMethodName           = "/pb.StorageCloudService/Fetch"
	StorageCloudService_FetchAndConvert_FullMethodName = "/pb.StorageCloudService/FetchAndConvert"
	StorageCloudService_Push_FullMethodName            = "/pb.StorageCloudService/Push"
	StorageCloudService_Drop_FullMethodName            = "/pb.StorageCloudService/Drop"
	StorageCloudService_CopyFrom_FullMethodName        = "/pb.StorageCloudService/CopyFrom"
)

// StorageCloudServiceClient is the client API for StorageCloudService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StorageCloudServiceClient interface {
	Head(ctx context.Context, in *HeadReq, opts ...grpc.CallOption) (*HeadRes, error)
	Fetch(ctx context.Context, in *FetchReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FetchRes], error)
	FetchAndConvert(ctx context.Context, in *FetchConvertReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FetchRes], error)
	Push(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[PushReq, PushRes], error)
	Drop(ctx context.Context, in *DropReq, opts ...grpc.CallOption) (*DropRes, error)
	CopyFrom(ctx context.Context, in *CopyFromReq, opts ...grpc.CallOption) (*CopyFromRes, error)
}

type storageCloudServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStorageCloudServiceClient(cc grpc.ClientConnInterface) StorageCloudServiceClient {
	return &storageCloudServiceClient{cc}
}

func (c *storageCloudServiceClient) Head(ctx context.Context, in *HeadReq, opts ...grpc.CallOption) (*HeadRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HeadRes)
	err := c.cc.Invoke(ctx, StorageCloudService_Head_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageCloudServiceClient) Fetch(ctx context.Context, in *FetchReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FetchRes], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StorageCloudService_ServiceDesc.Streams[0], StorageCloudService_Fetch_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FetchReq, FetchRes]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StorageCloudService_FetchClient = grpc.ServerStreamingClient[FetchRes]

func (c *storageCloudServiceClient) FetchAndConvert(ctx context.Context, in *FetchConvertReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FetchRes], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StorageCloudService_ServiceDesc.Streams[1], StorageCloudService_FetchAndConvert_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FetchConvertReq, FetchRes]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StorageCloudService_FetchAndConvertClient = grpc.ServerStreamingClient[FetchRes]

func (c *storageCloudServiceClient) Push(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[PushReq, PushRes], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StorageCloudService_ServiceDesc.Streams[2], StorageCloudService_Push_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PushReq, PushRes]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StorageCloudService_PushClient = grpc.ClientStreamingClient[PushReq, PushRes]

func (c *storageCloudServiceClient) Drop(ctx context.Context, in *DropReq, opts ...grpc.CallOption) (*DropRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DropRes)
	err := c.cc.Invoke(ctx, StorageCloudService_Drop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageCloudServiceClient) CopyFrom(ctx context.Context, in *CopyFromReq, opts ...grpc.CallOption) (*CopyFromRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CopyFromRes)
	err := c.cc.Invoke(ctx, StorageCloudService_CopyFrom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StorageCloudServiceServer is the server API for StorageCloudService service.
// All implementations must embed UnimplementedStorageCloudServiceServer
// for forward compatibility.
type StorageCloudServiceServer interface {
	Head(context.Context, *HeadReq) (*HeadRes, error)
	Fetch(*FetchReq, grpc.ServerStreamingServer[FetchRes]) error
	FetchAndConvert(*FetchConvertReq, grpc.ServerStreamingServer[FetchRes]) error
	Push(grpc.ClientStreamingServer[PushReq, PushRes]) error
	Drop(context.Context, *DropReq) (*DropRes, error)
	CopyFrom(context.Context, *CopyFromReq) (*CopyFromRes, error)
	mustEmbedUnimplementedStorageCloudServiceServer()
}

// UnimplementedStorageCloudServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStorageCloudServiceServer struct{}

func (UnimplementedStorageCloudServiceServer) Head(context.Context, *HeadReq) (*HeadRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Head not implemented")
}
func (UnimplementedStorageCloudServiceServer) Fetch(*FetchReq, grpc.ServerStreamingServer[FetchRes]) error {
	return status.Errorf(codes.Unimplemented, "method Fetch not implemented")
}
func (UnimplementedStorageCloudServiceServer) FetchAndConvert(*FetchConvertReq, grpc.ServerStreamingServer[FetchRes]) error {
	return status.Errorf(codes.Unimplemented, "method FetchAndConvert not implemented")
}
func (UnimplementedStorageCloudServiceServer) Push(grpc.ClientStreamingServer[PushReq, PushRes]) error {
	return status.Errorf(codes.Unimplemented, "method Push not implemented")
}
func (UnimplementedStorageCloudServiceServer) Drop(context.Context, *DropReq) (*DropRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Drop not implemented")
}
func (UnimplementedStorageCloudServiceServer) CopyFrom(context.Context, *CopyFromReq) (*CopyFromRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyFrom not implemented")
}
func (UnimplementedStorageCloudServiceServer) mustEmbedUnimplementedStorageCloudServiceServer() {}
func (UnimplementedStorageCloudServiceServer) testEmbeddedByValue()                             {}

// UnsafeStorageCloudServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StorageCloudServiceServer will
// result in compilation errors.
type UnsafeStorageCloudServiceServer interface {
	mustEmbedUnimplementedStorageCloudServiceServer()
}

func RegisterStorageCloudServiceServer(s grpc.ServiceRegistrar, srv StorageCloudServiceServer) {
	// If the following call pancis, it indicates UnimplementedStorageCloudServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StorageCloudService_ServiceDesc, srv)
}

func _StorageCloudService_Head_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageCloudServiceServer).Head(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageCloudService_Head_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageCloudServiceServer).Head(ctx, req.(*HeadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageCloudService_Fetch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FetchReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StorageCloudServiceServer).Fetch(m, &grpc.GenericServerStream[FetchReq, FetchRes]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StorageCloudService_FetchServer = grpc.ServerStreamingServer[FetchRes]

func _StorageCloudService_FetchAndConvert_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FetchConvertReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StorageCloudServiceServer).FetchAndConvert(m, &grpc.GenericServerStream[FetchConvertReq, FetchRes]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StorageCloudService_FetchAndConvertServer = grpc.ServerStreamingServer[FetchRes]

func _StorageCloudService_Push_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StorageCloudServiceServer).Push(&grpc.GenericServerStream[PushReq, PushRes]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StorageCloudService_PushServer = grpc.ClientStreamingServer[PushReq, PushRes]

func _StorageCloudService_Drop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageCloudServiceServer).Drop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageCloudService_Drop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageCloudServiceServer).Drop(ctx, req.(*DropReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageCloudService_CopyFrom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyFromReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageCloudServiceServer).CopyFrom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageCloudService_CopyFrom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageCloudServiceServer).CopyFrom(ctx, req.(*CopyFromReq))
	}
	return interceptor(ctx, in, info, handler)
}

// StorageCloudService_ServiceDesc is the grpc.ServiceDesc for StorageCloudService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StorageCloudService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.StorageCloudService",
	HandlerType: (*StorageCloudServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Head",
			Handler:    _StorageCloudService_Head_Handler,
		},
		{
			MethodName: "Drop",
			Handler:    _StorageCloudService_Drop_Handler,
		},
		{
			MethodName: "CopyFrom",
			Handler:    _StorageCloudService_CopyFrom_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Fetch",
			Handler:       _StorageCloudService_Fetch_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FetchAndConvert",
			Handler:       _StorageCloudService_FetchAndConvert_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Push",
			Handler:       _StorageCloudService_Push_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "message.proto",
}
